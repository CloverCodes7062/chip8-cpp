//
// Created by Stacy on 3/12/2024.
//

#include "ram.h"
#include <iostream>

Ram::Ram() : mem({}) {
    std::array<std::array<uint8_t, 5>, 16> sprites = {{
      {0xF0, 0x90, 0x90, 0x90, 0xF0}, // 0
      {0x20, 0x60, 0x20, 0x20, 0x70}, // 1
      {0xF0, 0x10, 0xF0, 0x80, 0xF0}, // 2
      {0xF0, 0x10, 0xF0, 0x10, 0xF0}, // 3
      {0x90, 0x90, 0xF0, 0x10, 0x10}, // 4
      {0xF0, 0x80, 0xF0, 0x10, 0xF0}, // 5
      {0xF0, 0x80, 0xF0, 0x90, 0xF0}, // 6
      {0xF0, 0x10, 0x20, 0x40, 0x40}, // 7
      {0xF0, 0x90, 0xF0, 0x90, 0xF0}, // 8
      {0xF0, 0x90, 0xF0, 0x10, 0xF0}, // 9
      {0xF0, 0x90, 0xF0, 0x90, 0x90}, // A
      {0xE0, 0x90, 0xE0, 0x90, 0xE0}, // B
      {0xF0, 0x80, 0x80, 0x80, 0xF0}, // C
      {0xE0, 0x90, 0x90, 0x90, 0xE0}, // D
      {0xF0, 0x80, 0xF0, 0x80, 0xF0}, // E
      {0xF0, 0x80, 0xF0, 0x80, 0x80}  // F
    }};

    size_t i = 0;
    for (const auto& sprite : sprites) {
        for (const auto& byte : sprite) {
            mem[i++] = byte;
        }
    }
}

void Ram::write_byte(uint16_t address, uint8_t value) {
    mem[address] = value;
}

uint8_t Ram::read_byte(uint16_t address) const {
    return mem[address];
}

void Ram::print_ram() const {
    for (const auto& byte : mem) {
        std::cout << +byte << ' ';
    }
    std::cout << std::endl;
}